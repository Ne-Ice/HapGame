#include "stdafx.h"
#include "main.h"
//Math class bindings

void LuaVec2s(lua_State *L)
{
	//Vec2
	module(L)
		[
			class_<Vec2>("Vec2")
			.def(constructor<>())
			.def(constructor<C VecD2 &>())
			.def(constructor<float>())
			.def(constructor<float,float>())
			.def("zero",										&Vec2::zero)
			.def("set",(Vec2&(Vec2::*)(float))					&Vec2::set)
			.def("set",(Vec2&(Vec2::*)(float,float))			&Vec2::set)
			.def("mul",(Vec2&(Vec2::*)(C Matrix3 &))			&Vec2::mul)
			.def("mul",(Vec2&(Vec2::*)(C Matrix  &))			&Vec2::mul)
			.def("div",(Vec2&(Vec2::*)(C Matrix3 &,bool))		&Vec2::div)
			.def("div",(Vec2&(Vec2::*)(C Matrix  &,bool))		&Vec2::div)
			.def("rotate",(Vec2&(Vec2::*)(float))				&Vec2::rotate)
			.def("rotate",(Vec2&(Vec2::*)(float,float))			&Vec2::rotate)
			.def("xy0",											&Vec2::xy0)
			.def("x0y",											&Vec2::x0y)
			.def("_0yx",										&Vec2::_0yx)
			.def("any",											&Vec2::any)
			.def("all",											&Vec2::all)
			.def("min",											&Vec2::min)
			.def("max",											&Vec2::max)
			.def("avg",											&Vec2::avg)
			.def("sum",											&Vec2::sum)
			.def("length",										&Vec2::length)
			.def("length2",										&Vec2::length2)
			.def("satLength",									&Vec2::satLength)
			.def("setLength",									&Vec2::setLength)
			.def("clampLength",									&Vec2::clampLength)
			.def("length2",										&Vec2::length2)
			.def("normalize",									&Vec2::normalize)
			.def("chs",											&Vec2::chs)
			.def("abs",											&Vec2::abs)
			.def("sat",											&Vec2::sat)
			.def("draw",										&Vec2::draw)
			.def_readwrite("x",									&Vec2::x)
			.def_readwrite("y",									&Vec2::y)
		];

	//VecD2
	module(L)
		[
			class_<VecD2>("VecD2")
			.def(constructor<>())
			.def(constructor<C Vec2&>())
			.def(constructor<double>())
			.def(constructor<double,double>())
			.def("zero",										 &VecD2::zero)
			.def("set",(VecD2&(VecD2::*)(double))				 &VecD2::set)
			.def("set",(VecD2&(VecD2::*)(double,double))		 &VecD2::set)
			.def("mul",(VecD2&(VecD2::*)(C MatrixD3 &))			 &VecD2::mul)
			.def("mul",(VecD2&(VecD2::*)(C MatrixD  &))			 &VecD2::mul)
			.def("div",(VecD2&(VecD2::*)(C MatrixD3 &,bool))     &VecD2::div)
			.def("div",(VecD2&(VecD2::*)(C MatrixD  &,bool))     &VecD2::div)
			.def("any",											 &VecD2::any)
			.def("all",											 &VecD2::all)
			.def("min",											 &VecD2::min)
			.def("max",											 &VecD2::max)
			.def("avg",											 &VecD2::avg)
			.def("sum",											 &VecD2::sum)
			.def("length",										 &VecD2::length)
			.def("length2",										 &VecD2::length2)
			.def("satLength",									 &VecD2::satLength)
			.def("setLength",									 &VecD2::setLength)
			.def("clampLength",									 &VecD2::clampLength)
			.def("normalize",									 &VecD2::normalize)
			.def("chs",											 &VecD2::chs)
			.def("abs",											 &VecD2::abs)
			.def("sat",										   	 &VecD2::sat)
			.def("draw",										 &VecD2::draw)
			.def_readwrite("x",									 &VecD2::x)
			.def_readwrite("y",									 &VecD2::y)
		];
}


void LuaVecs(lua_State *L)
{
	//Vec
	module(L)
		[
			class_<Vec>("Vec")
			.def(constructor<>())
			.def(constructor<C VecD &>())
			.def(constructor<float>())
			.def(constructor<C Vec2 &, float>())
			.def(constructor<float,float,float>())
			.def("zero",								&Vec::zero)
			.def("v2",(Vec2&(Vec::*)())				    &Vec::v2)
			.def("v2",(C Vec2&(Vec::*)()C)				&Vec::v2)
			.def("set",(Vec&(Vec::*)(float))			&Vec::set)
			.def("set",(Vec&(Vec::*)(float,float,float))&Vec::set)
			.def("set",(Vec&(Vec::*)(C Vec2 &,float))	&Vec::set)
			.def("mul",(Vec&(Vec::*)(C Matrix3 &))      &Vec::mul)
			.def("mul",(Vec&(Vec::*)(C Matrix  &))      &Vec::mul)
			.def("div",(Vec&(Vec::*)(C Matrix3 &,bool)) &Vec::div)
			.def("div",(Vec&(Vec::*)(C Matrix  &,bool)) &Vec::div)
			.def("xy",									&Vec::xy)
			.def("xz",									&Vec::xz)
			.def("yz",									&Vec::yz)
			.def("xzy",									&Vec::xzy)
			.def("x0z",									&Vec::x0z)
			.def("any",									&Vec::any)
			.def("all",									&Vec::all)
			.def("min",									&Vec::min)
			.def("max",									&Vec::max)
			.def("avg",									&Vec::avg)
			.def("sum",									&Vec::sum)
			.def("length",								&Vec::length)
			.def("length2",								&Vec::length2)
			.def("satLength",							&Vec::satLength)
			.def("setLength",							&Vec::setLength)
			.def("clampLength",							&Vec::clampLength)
			.def("normalize",							&Vec::normalize)
			.def("chs",									&Vec::chs)
			.def("abs",									&Vec::abs)
			.def("sat",									&Vec::sat)
			.def("draw",								&Vec::draw)
			.def("drawP",								&Vec::drawP)
			.def_readwrite("x",							&Vec::x)
			.def_readwrite("y",							&Vec::y)
			.def_readwrite("z",							&Vec::z)
		];
	//VecD
	module(L)
		[
			class_<VecD>("VecD")
			.def(constructor<>())
			.def(constructor<C Vec &>())
			.def(constructor<C VecD2 &,double>())
			.def(constructor<double>())
			.def(constructor<double,double,double>())
			.def("zero",									 &VecD::zero)
			.def("v2",(VecD2&(VecD::*)())				     &VecD::v2)
			.def("v2",(C VecD2&(VecD::*)()C)					 &VecD::v2)
			.def("set",(VecD&(VecD::*)(double))				 &VecD::set)
			.def("set",(VecD&(VecD::*)(double,double,double))&VecD::set)
			.def("set",(VecD&(VecD::*)(C VecD2 &,double))	 &VecD::set)
			.def("mul",(VecD&(VecD::*)(C MatrixD3 &))		 &VecD::mul)
			.def("mul",(VecD&(VecD::*)(C MatrixD  &))		 &VecD::mul)
			.def("div",(VecD&(VecD::*)(C MatrixD3 &,bool))	 &VecD::div)
			.def("div",(VecD&(VecD::*)(C MatrixD  &,bool))	 &VecD::div)
			.def("xy",										 &VecD::xy)
			.def("xz",										 &VecD::xz)
			.def("yz",										 &VecD::yz)
			.def("any",										 &VecD::any)
			.def("all",										 &VecD::all)
			.def("min",										 &VecD::min)
			.def("max",										 &VecD::max)
			.def("avg",										 &VecD::avg)
			.def("sum",									     &VecD::sum)
			.def("length",									 &VecD::length)
			.def("length2",									 &VecD::length2)
			.def("satLength",								 &VecD::satLength)
			.def("setLength",								 &VecD::setLength)
			.def("clampLength",								 &VecD::clampLength)
			.def("normalize",								 &VecD::normalize)
			.def("chs",										 &VecD::chs)
			.def("abs",										 &VecD::abs)
			.def("sat",										 &VecD::sat)
			.def("draw",									 &VecD::draw)
			.def_readwrite("x",								 &VecD::x)
			.def_readwrite("y",								 &VecD::y)
			.def_readwrite("z",								 &VecD::z)
		];
}

void LuaVec4s(lua_State *L)
{
	//Vec4
	module(L)
		[
			luabind::class_<Vec4>("Vec4")
			.def(constructor<>())
			.def(constructor<C Vec2&,float,float>())
			.def(constructor<C Vec2&,C Vec2&>())
			.def(constructor<C Vec&,float>())
			.def(constructor<C VecD4&>())
			.def(constructor<float>())
			.def(constructor<float,float,float,float>())
			.def("zero",										&Vec4::zero)
			.def("v2", (Vec2&(Vec4::*)())						&Vec4::v2)
			.def("v3", (Vec&(Vec4::*) ())						&Vec4::v3)
			.def("v2", (C Vec2&(Vec4::*)()C)					&Vec4::v2)
			.def("v3", (C Vec&(Vec4::*) ()C)					&Vec4::v3)
			.def("set",(Vec4&(Vec4::*)(float))					&Vec4::set)
			.def("set",(Vec4&(Vec4::*)(float,float,float,float))&Vec4::set)
			.def("set",(Vec4&(Vec4::*)(C Vec2 &,float,float))	&Vec4::set)
			.def("set",(Vec4&(Vec4::*)(C Vec &,float))			&Vec4::set)
			.def("set",(Vec4&(Vec4::*)(C Vec2 &,C Vec2 &))		&Vec4::set)
			.def("any",											&Vec4::any)
			.def("all",											&Vec4::all)
			.def("min",											&Vec4::min)
			.def("max",											&Vec4::max)
			.def("avg",											&Vec4::avg)
			.def("sum",											&Vec4::sum)
			.def("length",										&Vec4::length)
			.def("length2",										&Vec4::length2)
			.def("normalize",									&Vec4::normalize)
			.def("chs",											&Vec4::chs)
			.def("abs",											&Vec4::abs)
			.def("sat",											&Vec4::sat)
			.def_readwrite("x",									&Vec4::x)
			.def_readwrite("y",									&Vec4::y)
			.def_readwrite("z",									&Vec4::z)
			.def_readwrite("w",									&Vec4::w)
		];
	//VecD4
	module(L)
		[
			luabind::class_<VecD4>("VecD4")
			.def(constructor<>())
			.def(constructor<double>())
			.def(constructor<C VecD2 &,double,double>())
			.def(constructor<C VecD &,double>())
			.def(constructor<C VecD2 &,C VecD2 &>())
			.def(constructor<C Vec4 &>())
			.def(constructor<double,double,double,double>())
			.def("zero",											  &VecD4::zero)
			.def("v2", (VecD2&  (VecD4::*)  ())						  &VecD4::v2)
			.def("v3", (VecD&   (VecD4::*)   ())					  &VecD4::v3)
			.def("v2", (C VecD2&(VecD4::*)()C)						  &VecD4::v2)
			.def("v3", (C VecD& (VecD4::*) ()C)						  &VecD4::v3)
			.def("set",(VecD4&(VecD4::*)(double))					  &VecD4::set)
			.def("set",(VecD4&(VecD4::*)(double,double,double,double))&VecD4::set)
			.def("set",(VecD4&(VecD4::*)(C VecD2 &,double,double))	  &VecD4::set)
			.def("set",(VecD4&(VecD4::*)(C VecD & ,double))			  &VecD4::set)
			.def("set",(VecD4&(VecD4::*)(C VecD2 &,C VecD2 &))		  &VecD4::set)
			.def("any",												  &VecD4::any)
			.def("all",												  &VecD4::all)
			.def("min",												  &VecD4::min)
			.def("max",												  &VecD4::max)
			.def("avg",												  &VecD4::avg)
			.def("sum",												  &VecD4::sum)
			.def("length",											  &VecD4::length)
			.def("length2",											  &VecD4::length2)
			.def("normalize",										  &VecD4::normalize)
			.def("chs",												  &VecD4::chs)
			.def("abs",												  &VecD4::abs)
			.def("sat",												  &VecD4::sat)
			.def_readwrite("x",										  &VecD4::x)
			.def_readwrite("y",										  &VecD4::y)
			.def_readwrite("z",										  &VecD4::z)
			.def_readwrite("w",										  &VecD4::w)
		];

}

void LuaQuaternion(lua_State *L)

{
	//Quaternion
	module(L)
		[
			class_<Quaternion>("Quaternion")
			.def(constructor<>())
			.def(constructor<C Vec4&>())
			.def(constructor<C Matrix3 &>())
			.def("zero",														&Quaternion::zero)
			.def("v2", (Vec2&(Quaternion::*)())									&Quaternion::v2)
			.def("v3", (Vec&(Quaternion::*) ())									&Quaternion::v3)
			.def("v2", (C Vec2&(Quaternion::*)()C)								&Quaternion::v2)
			.def("v3", (C Vec&(Quaternion::*) ()C)								&Quaternion::v3)
			.def("set",(Vec4&(Quaternion::*)(float))							&Quaternion::set)
			.def("set",(Vec4&(Quaternion::*)(float,float,float,float))			&Quaternion::set)
			.def("set",(Vec4&(Quaternion::*)(C Vec2 &,float,float))				&Quaternion::set)
			.def("set",(Vec4&(Quaternion::*)(C Vec &,float))					&Quaternion::set)
			.def("set",(Vec4&(Quaternion::*)(C Vec2 &,C Vec2 &))				&Quaternion::set)
			.def("mul",(void(Quaternion::*)(C Quaternion &, Quaternion &)C)		&Quaternion::mul)
			.def("mul",(Quaternion&(Quaternion::*)(C Quaternion &))				&Quaternion::mul)
			.def("inverse",(Quaternion&(Quaternion::*)(  Quaternion &)C)		&Quaternion::inverse)
			.def("inverse",(Quaternion&(Quaternion::*)())						&Quaternion::inverse)
			.def("setRotate",(Quaternion&(Quaternion::*)(float,float,float))	&Quaternion::setRotate)
			.def("setRotate",(Quaternion&(Quaternion::*)(C Vec &,float))		&Quaternion::setRotate)
			.def("setRotateX",													&Quaternion::setRotateX)
			.def("setRotateY",													&Quaternion::setRotateY)
			.def("setRotateZ",													&Quaternion::setRotateZ)
			.def("identity",													&Quaternion::identity)
			.def("any",															&Quaternion::any)
			.def("all",															&Quaternion::all)
			.def("min",															&Quaternion::min)
			.def("max",															&Quaternion::max)
			.def("avg",															&Quaternion::avg)
			.def("sum",															&Quaternion::sum)
			.def("length",														&Quaternion::length)
			.def("length2",														&Quaternion::length2)
			.def("normalize",													&Quaternion::normalize)
			.def("chs",															&Quaternion::chs)
			.def("abs",															&Quaternion::abs)
			.def("sat",															&Quaternion::sat)
			.def("angle",														&Quaternion::angle)
			.def("axis",														&Quaternion::axis)
			.def_readwrite("x",													&Quaternion::x)
			.def_readwrite("y",													&Quaternion::y)
			.def_readwrite("z",													&Quaternion::z)
			.def_readwrite("w",													&Quaternion::w)
		];
}

void RegisterMathFuncs(lua_State *L)
{
	LuaVec2s(L);
	LuaVecs(L);
	LuaVec4s(L);
	LuaQuaternion(L);
}